install.packages("keras")
library(caret)
library(Hmisc) 
library(foreign)
library(dplyr) 
library(VIM) 
library(scorecard) 
library(corrplot)  
library(nnet)   
library(keras)

df_DPQ =  foreign::read.xport("DPQ_I(3).XPT")

df_DEMO = foreign::read.xport("DEMO_I(1).XPT")

df_DR1IFF = foreign::read.xport("DR1IFF_I(2).XPT")

df_DR1IFF<-df_DR1IFF[,-c(2:18)] 

df_DR1IFF = sapply(df_DR1IFF,function(x) tapply(x,df_DR1IFF$SEQN,function(x) mean(x,na.rm = T)))

df_DR1TOT = foreign::read.xport("DR1TOT_I(2).XPT"）

df_DR2IFF = foreign::read.xport("DR2IFF_I(2).XPT")

df_DR2IFF<-df_DR2IFF[,-c(2:18)] 

df_DR2IFF = sapply(df_DR2IFF,function(x) tapply(x,df_DR2IFF$SEQN,function(x) mean(x,na.rm = T)))

df_DR2TOT = foreign::read.xport("DR2TOT_I(2).XPT")

df_DRXFCD = foreign::read.xport("DRXFCD_I(2).XPT")


duplicated(df_DPQ$SEQN) %>% table() 


df_DPQ[is.na(df_DPQ)] = 0 
df_DPQ$DPQ_finish = apply(df_DPQ[-1],1,function(x) any(x > 0)) %>% as.integer()
table(df_DPQ$DPQ_finish) 


df_total = merge(df_DPQ[c("SEQN","DPQ_finish")],df_DEMO,by.x = 'SEQN',by.y = 'SEQN',all.x = T)
df_total = merge(df_total,df_DR1IFF,by.x = 'SEQN',by.y = 'SEQN',all.x = T)
df_total = merge(df_total,df_DR2IFF,by.x = 'SEQN',by.y = 'SEQN',all.x = T)
df_total = merge(df_total,df_DR1TOT,by.x = 'SEQN',by.y = 'SEQN',all.x = T)
df_total = merge(df_total,df_DR2TOT,by.x = 'SEQN',by.y = 'SEQN',all.x = T)




df_total = df_total[names(which(sapply(df_total,function(x) sum(is.na(x))/dim(df_total)[1]) <= 0.2))]
aggr(df_total,prop=TRUE,numbers=TRUE)  
dim(df_total)

df_total = df_total[append("DPQ_finish",names(which(sapply(df_total[-1:-2],function(x) var(x,na.rm = T)) > 1)))]
dim(df_total)
####构建模型

for(i in colnames(df_total[-1])){
  df_total[,i][is.na(df_total[,i])] = mean(df_total[,i],na.rm = T)
  df_total[,i] = as.numeric(df_total[,i])
}

modeldata = df_total


#利用keras
modeldata$DPQ_finish = as.factor(modeldata$DPQ_finish)
prop.table(table(modeldata$DPQ_finish)) 
Index = createDataPartition(modeldata$DPQ_finish,p = 0.7,list = F)
data_train = modeldata[Index,]
data_train_X = select(data_train,-DPQ_finish)
data_train_Y = select(data_train,DPQ_finish)
data_test = modeldata[-Index,]
data_test_X = select(data_test,-DPQ_finish)
data_test_Y = select(data_test,DPQ_finish)

model <- keras_model_sequential()


model %>% 
  layer_dense(units = 10, activation = 'relu') %>% 
  layer_dropout(rate = 0.5) %>% 
  layer_dense(units = 10, activation = 'relu') %>% 
  layer_dropout(rate = 0.5) %>% 
  layer_dense(units = 1, activation = 'sigmoid') %>% 
  compile(
    loss = 'binary_crossentropy',
    optimizer = 'rmsprop',
    metrics = c('accuracy')
  )


model_result = model %>% fit(data_train_X, data_train_Y)
summary(model_result)
score = model %>% evaluate(data_test_X, data_test_Y)

data_test_Y_pred = model %>% predict_classes(data_test_X)

scorecard::perf_eva(data_test_Y,data_test_Y_pred)
